{"version":3,"file":"static/js/841.f468c425.chunk.js","mappings":"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","sources":["components/AuthForm/AuthForm.tsx","webpack://project/./src/components/AuthForm/styles.module.scss?ee32","components/Auth/Auth.tsx","webpack://project/./src/components/Auth/styles.module.scss?35eb","components/Auth/index.ts"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport cn from 'classnames/bind';\nimport Cookies from 'js-cookie';\nimport { useAppDispatch, useAppSelector } from '../../hooks/useRedux';\nimport { useValidation } from '../../hooks/useValidation';\nimport { fetchAuth } from '../../store/API/auth';\nimport { changeAuth } from '../../store/auth/slice';\nimport Button from '../../ui/Button';\nimport Input from '../../ui/Input';\nimport Toast from '../../ui/Toast';\nimport styles from './styles.module.scss';\n\nconst cx = cn.bind(styles);\n\ntype AuthFormProps = {\n  signUp: boolean;\n  goTo: (e: React.MouseEvent<HTMLButtonElement>, type: string) => void;\n  handleShowAuth: (type?: string | boolean) => void;\n};\n\nexport const AuthForm: FC<AuthFormProps> = ({\n  signUp,\n  goTo,\n  handleShowAuth,\n}) => {\n  const dispatch = useAppDispatch();\n  const { error } = useAppSelector(({ auth }) => auth);\n\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n  const [isErrorAuth, setIsErrorAuth] = useState(false);\n  const [isErrorEmail, setIsErrorEmail] = useState(true);\n  const [errorEmailMessage, setErrorEmailMessage] = useState('Заполните поле');\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const [isErrorPassword, setIsErrorPassword] = useState(true);\n  const [errorPasswordMessage, setErrorPasswordMessage] =\n    useState('Заполните поле');\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    type: string,\n  ) => {\n    if (type === 'email') {\n      setUserEmail(e.target.value);\n      useValidation(\n        'email',\n        e.target.value,\n        setIsErrorEmail,\n        setErrorEmailMessage,\n      );\n    }\n    if (type === 'password') {\n      setUserPassword(e.target.value);\n      useValidation(\n        'password',\n        e.target.value,\n        setIsErrorPassword,\n        setErrorPasswordMessage,\n      );\n    }\n  };\n\n  const handleClickAuth = (\n    type: string,\n    e: React.FormEvent<HTMLFormElement>,\n  ) => {\n    e.preventDefault();\n    dispatch(\n      fetchAuth({\n        type,\n        auth: {\n          fingerprint: 'string',\n          username: userEmail,\n          password: userPassword,\n        },\n      }),\n    ).then((data) => {\n      if (data.meta.requestStatus === 'fulfilled') {\n        dispatch(changeAuth(true));\n        Cookies.set('tokens', JSON.stringify(data.payload));\n        handleShowAuth(false);\n      } else {\n        setIsErrorAuth(true);\n      }\n    });\n  };\n\n  return (\n    <>\n      <form\n        className={cx('validationForm')}\n        onSubmit={\n          signUp\n            ? (e) => handleClickAuth('register', e)\n            : (e) => handleClickAuth('login', e)\n        }\n      >\n        <Input\n          id={'emailInput'}\n          type={'email'}\n          label={'Email'}\n          value={userEmail}\n          onChange={(e) => handleChange(e, 'email')}\n          isError={isErrorEmail}\n          errorMessage={errorEmailMessage}\n        />\n        <Input\n          id={'passwordInput'}\n          type={!isShowPassword ? 'password' : 'text'}\n          handleChangeShowPassword={() => setIsShowPassword(!isShowPassword)}\n          label={'Password'}\n          value={userPassword}\n          onChange={(e) => handleChange(e, 'password')}\n          isError={isErrorPassword}\n          errorMessage={errorPasswordMessage}\n        />\n        <Button\n          className={'defaultBtn'}\n          disabled={isErrorEmail || isErrorPassword}\n        >\n          {signUp ? 'sign up' : 'log in'}\n        </Button>\n        <p className={cx('link', 'linkMobile')}>\n          {signUp\n            ? 'If you already have an account, please '\n            : 'If you don\"t have an account yet, please '}\n          <button\n            className={cx('goTo')}\n            onClick={\n              signUp ? (e) => goTo(e, 'logIn') : (e) => goTo(e, 'signUp')\n            }\n          >\n            log in\n          </button>\n        </p>\n      </form>\n      <Toast\n        isShowToast={isErrorAuth}\n        handleCloseToast={() => setIsErrorAuth(false)}\n        message={error}\n      />\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"validationForm\":\"styles_validationForm__iQiBV\",\"link\":\"styles_link__jMqyN\",\"linkMobile\":\"styles_linkMobile__8A7nR\",\"goTo\":\"styles_goTo__bPcVM\"};","import React, { FC, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport cn from 'classnames/bind';\nimport { modalNode } from '../../constants';\nimport { usePressEscape } from '../../hooks/usePressEscape';\nimport { useThemeContext } from '../../hooks/useThemeContext';\nimport { AuthForm } from '../AuthForm/AuthForm';\nimport { ReactComponent as CloseIcon } from '../../assets/images/closeIcon.svg';\nimport logInImg from '../../assets/images/logInImg.jpg';\nimport signUpImg from '../../assets/images/signUpImg.jpg';\nimport styles from './styles.module.scss';\n\nconst cx = cn.bind(styles);\n\nexport type AuthProps = {\n  isShowAuth: {\n    logIn: boolean;\n    signUp: boolean;\n  };\n  handleShowAuth: (type?: string | boolean) => void;\n};\n\nexport const Auth: FC<AuthProps> = ({ isShowAuth, handleShowAuth }) => {\n  const { theme } = useThemeContext();\n  const { logIn, signUp } = isShowAuth;\n\n  const goTo = (e: React.MouseEvent<HTMLButtonElement>, type: string) => {\n    e.preventDefault();\n    handleShowAuth(type);\n  };\n  useEffect(() => {\n    usePressEscape(handleShowAuth, logIn || signUp);\n  }, [isShowAuth]);\n\n  return createPortal(\n    <>\n      {(logIn || signUp) && (\n        <>\n          <section className={cx('auth')} onClick={() => handleShowAuth(false)}>\n            <div\n              className={cx('authContent')}\n              onClick={(e) => e.stopPropagation()}\n            >\n              <img\n                src={signUp ? signUpImg : logInImg}\n                alt=\"authBackGround\"\n                className={cx('signUpBackgroundImg')}\n              />\n              <div className={cx('validationWrapp')}>\n                <h2 className={cx('validationHeading')}>\n                  {signUp ? 'Create your profile' : 'Welcome Back'}\n                </h2>\n                <p className={cx('link')}>\n                  {signUp\n                    ? 'If you already have an account, please '\n                    : 'If you don\"t have an account yet, please '}\n                  <button\n                    className={cx('goTo')}\n                    onClick={\n                      signUp\n                        ? (e) => goTo(e, 'logIn')\n                        : (e) => goTo(e, 'signUp')\n                    }\n                  >\n                    {signUp ? 'log in' : 'sign up'}\n                  </button>\n                </p>\n                <AuthForm\n                  signUp={signUp}\n                  goTo={goTo}\n                  handleShowAuth={handleShowAuth}\n                />\n                <CloseIcon\n                  onClick={() => handleShowAuth(false)}\n                  fill={theme === 'dark' ? '#575757' : '#9C9C9C'}\n                  className={cx('closeIcon')}\n                />\n              </div>\n            </div>\n          </section>\n        </>\n      )}\n    </>,\n    modalNode,\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"auth\":\"styles_auth__WeaFG\",\"authContent\":\"styles_authContent__QucYS\",\"signUpBackgroundImg\":\"styles_signUpBackgroundImg__H4LQc\",\"validationWrapp\":\"styles_validationWrapp__ouFuj\",\"validationHeading\":\"styles_validationHeading__2iUD8\",\"link\":\"styles_link__gRdnQ\",\"linkMobile\":\"styles_linkMobile__lasXD\",\"goTo\":\"styles_goTo__StDmY\",\"closeIcon\":\"styles_closeIcon__GdLHa\"};","import { Auth } from './Auth';\n\nexport default Auth;\n"],"names":["cx","cn","AuthForm","signUp","goTo","handleShowAuth","dispatch","useAppDispatch","error","useAppSelector","auth","useState","userEmail","setUserEmail","userPassword","setUserPassword","isErrorAuth","setIsErrorAuth","isErrorEmail","setIsErrorEmail","errorEmailMessage","setErrorEmailMessage","isShowPassword","setIsShowPassword","isErrorPassword","setIsErrorPassword","errorPasswordMessage","setErrorPasswordMessage","handleChange","e","type","target","value","useValidation","handleClickAuth","preventDefault","fetchAuth","fingerprint","username","password","then","data","meta","requestStatus","changeAuth","Cookies","JSON","stringify","payload","className","onSubmit","Input","id","label","onChange","isError","errorMessage","handleChangeShowPassword","Button","disabled","onClick","Toast","isShowToast","handleCloseToast","message","isShowAuth","theme","useThemeContext","logIn","useEffect","usePressEscape","createPortal","stopPropagation","src","signUpImg","logInImg","alt","fill","modalNode"],"sourceRoot":""}